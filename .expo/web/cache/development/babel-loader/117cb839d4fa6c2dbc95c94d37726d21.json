{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mattdizon/Desktop/use this /bubble-react-native/src/screens/Liked/Liked.tsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { useNavigation } from '@react-navigation/native';\nimport React, { useEffect, useState, useContext } from 'react';\nimport { getUserLikedPosts } from \"../../api/service\";\nimport { ScreenContainer } from \"../../components/ScreenContainer/ScreenContainer\";\nimport { TableCell } from \"../../components/TableCell/TableCell\";\nimport { TableView } from \"../../components/TableView/TableView\";\nimport { AuthContext } from \"../../providers/AuthProvider/AuthProvider\";\nimport { LoadingScreen } from \"../LoadingScreen/LoadingScreen\";\nexport var Liked = function Liked() {\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      likedPosts = _useState2[0],\n      setLikedPosts = _useState2[1];\n\n  var _useState3 = useState(true),\n      _useState4 = _slicedToArray(_useState3, 2),\n      isLoading = _useState4[0],\n      setIsLoading = _useState4[1];\n\n  var navigation = useNavigation();\n\n  var _useContext = useContext(AuthContext),\n      credentials = _useContext.credentials;\n\n  useEffect(function () {\n    (function _callee() {\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              getUserLikedPosts(credentials).then(function (likedPostsData) {\n                return setLikedPosts(likedPostsData);\n              }).then(function () {\n                return setIsLoading(false);\n              });\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    })();\n  }, [credentials]);\n\n  var route = function route(item) {\n    return navigation.navigate('Post', {\n      data: item\n    });\n  };\n\n  var postTableCell = function postTableCell(_ref) {\n    var item = _ref.item;\n    return React.createElement(TableCell, {\n      item: item,\n      nav: route,\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 53\n      }\n    });\n  };\n\n  return isLoading ? React.createElement(LoadingScreen, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }) : React.createElement(ScreenContainer, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 9\n    }\n  }, React.createElement(TableView, {\n    data: likedPosts,\n    tableCellRenderer: postTableCell,\n    scrollEnabled: false,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 9\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/mattdizon/Desktop/use this /bubble-react-native/src/screens/Liked/Liked.tsx"],"names":["useNavigation","React","useEffect","useState","useContext","getUserLikedPosts","ScreenContainer","TableCell","TableView","AuthContext","LoadingScreen","Liked","likedPosts","setLikedPosts","isLoading","setIsLoading","navigation","credentials","then","likedPostsData","route","item","navigate","data","postTableCell"],"mappings":";;;;;;AAAA,SAASA,aAAT,QAA8B,0BAA9B;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,EAAqCC,UAArC,QAAuD,OAAvD;AACA,SAASC,iBAAT;AAEA,SAASC,eAAT;AACA,SAASC,SAAT;AACA,SAASC,SAAT;AACA,SAASC,WAAT;AACA,SAASC,aAAT;AAEA,OAAO,IAAMC,KAAK,GAAG,SAARA,KAAQ,GAAmB;AACtC,kBAAoCR,QAAQ,EAA5C;AAAA;AAAA,MAAOS,UAAP;AAAA,MAAmBC,aAAnB;;AACA,mBAAkCV,QAAQ,CAAC,IAAD,CAA1C;AAAA;AAAA,MAAOW,SAAP;AAAA,MAAkBC,YAAlB;;AACA,MAAMC,UAAU,GAAGhB,aAAa,EAAhC;;AACA,oBAAwBI,UAAU,CAACK,WAAD,CAAlC;AAAA,MAAQQ,WAAR,eAAQA,WAAR;;AAEAf,EAAAA,SAAS,CAAC,YAAM;AACd,KAAC;AAAA;AAAA;AAAA;AAAA;AACCG,cAAAA,iBAAiB,CAACY,WAAD,CAAjB,CACCC,IADD,CACM,UAACC,cAAD;AAAA,uBAAoBN,aAAa,CAACM,cAAD,CAAjC;AAAA,eADN,EAECD,IAFD,CAEM;AAAA,uBAAMH,YAAY,CAAC,KAAD,CAAlB;AAAA,eAFN;;AADD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAD;AAKD,GANQ,EAMN,CAACE,WAAD,CANM,CAAT;;AAQA,MAAMG,KAAK,GAAG,SAARA,KAAQ,CAACC,IAAD;AAAA,WAAgBL,UAAU,CAACM,QAAX,CAAoB,MAApB,EAA4B;AAAEC,MAAAA,IAAI,EAAEF;AAAR,KAA5B,CAAhB;AAAA,GAAd;;AACA,MAAMG,aAAa,GAAG,SAAhBA,aAAgB;AAAA,QAAGH,IAAH,QAAGA,IAAH;AAAA,WAA4B,oBAAC,SAAD;AAAW,MAAA,IAAI,EAAEA,IAAjB;AAAuB,MAAA,GAAG,EAAGD,KAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAA5B;AAAA,GAAtB;;AAEA,SACEN,SAAS,GACL,oBAAC,aAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADK,GAEL,oBAAC,eAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACA,oBAAC,SAAD;AACE,IAAA,IAAI,EAAEF,UADR;AAEE,IAAA,iBAAiB,EAAEY,aAFrB;AAGE,IAAA,aAAa,EAAE,KAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADA,CAHN;AAWD,CA5BM","sourcesContent":["import { useNavigation } from '@react-navigation/native'\nimport React, { useEffect, useState, useContext } from 'react'\nimport { getUserLikedPosts } from '../../api/service'\nimport { Post } from '../../api/types'\nimport { ScreenContainer } from '../../components/ScreenContainer/ScreenContainer'\nimport { TableCell } from '../../components/TableCell/TableCell'\nimport { TableView } from '../../components/TableView/TableView'\nimport { AuthContext } from '../../providers/AuthProvider/AuthProvider'\nimport { LoadingScreen } from '../LoadingScreen/LoadingScreen'\n\nexport const Liked = (): JSX.Element => {\n  const [likedPosts, setLikedPosts] = useState()\n  const [isLoading, setIsLoading] = useState(true)\n  const navigation = useNavigation()\n  const { credentials } = useContext(AuthContext)\n\n  useEffect(() => {\n    (async () => {\n      getUserLikedPosts(credentials!)\n      .then((likedPostsData) => setLikedPosts(likedPostsData))\n      .then(() => setIsLoading(false))\n    })()\n  }, [credentials])\n\n  const route = (item: Post) => navigation.navigate('Post', { data: item })\n  const postTableCell = ({ item }: {item: Post}) => <TableCell item={item} nav={ route } />\n\n  return (\n    isLoading\n      ? <LoadingScreen/>\n      : <ScreenContainer>\n        <TableView\n          data={likedPosts}\n          tableCellRenderer={postTableCell}\n          scrollEnabled={false}\n        />\n      </ScreenContainer>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}