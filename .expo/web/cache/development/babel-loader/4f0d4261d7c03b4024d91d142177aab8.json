{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport { Ionicons } from '@expo/vector-icons';\nimport * as Font from 'expo-font';\nimport * as React from 'react';\nexport default function useCachedResources() {\n  var _React$useState = React.useState(false),\n      _React$useState2 = _slicedToArray(_React$useState, 2),\n      isLoadingComplete = _React$useState2[0],\n      setLoadingComplete = _React$useState2[1];\n\n  React.useEffect(function () {\n    function loadResourcesAndDataAsync() {\n      return _regeneratorRuntime.async(function loadResourcesAndDataAsync$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(Font.loadAsync(_objectSpread(_objectSpread({}, Ionicons.font), {}, {\n                IcoMoon: require(\"../../assets/icomoon/fonts/icomoon.ttf\")\n              })));\n\n            case 3:\n              _context.next = 8;\n              break;\n\n            case 5:\n              _context.prev = 5;\n              _context.t0 = _context[\"catch\"](0);\n              console.warn(_context.t0);\n\n            case 8:\n              _context.prev = 8;\n              setLoadingComplete(true);\n              return _context.finish(8);\n\n            case 11:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, [[0, 5, 8, 11]], Promise);\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n  return isLoadingComplete;\n}","map":{"version":3,"sources":["/Users/mattdizon/Desktop/use this /bubble-react-native/src/utils/useCachedResources.ts"],"names":["Ionicons","Font","React","useCachedResources","useState","isLoadingComplete","setLoadingComplete","useEffect","loadResourcesAndDataAsync","loadAsync","font","IcoMoon","require","console","warn"],"mappings":";;;;;;;;AAAA,SAASA,QAAT,QAAyB,oBAAzB;AACA,OAAO,KAAKC,IAAZ,MAAsB,WAAtB;AACA,OAAO,KAAKC,KAAZ,MAAuB,OAAvB;AACA,eAAe,SAASC,kBAAT,GAAwC;AACrD,wBAAgDD,KAAK,CAACE,QAAN,CAAe,KAAf,CAAhD;AAAA;AAAA,MAAOC,iBAAP;AAAA,MAA0BC,kBAA1B;;AAGAJ,EAAAA,KAAK,CAACK,SAAN,CAAgB,YAAM;AACpB,aAAeC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAGUP,IAAI,CAACQ,SAAL,iCACDT,QAAQ,CAACU,IADR;AAEJC,gBAAAA,OAAO,EAAEC,OAAO;AAFZ,iBAHV;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AASIC,cAAAA,OAAO,CAACC,IAAR;;AATJ;AAAA;AAWIR,cAAAA,kBAAkB,CAAC,IAAD,CAAlB;AAXJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAeAE,IAAAA,yBAAyB;AAC1B,GAjBD,EAiBG,EAjBH;AAmBA,SAAOH,iBAAP;AACD","sourcesContent":["import { Ionicons } from '@expo/vector-icons'\nimport * as Font from 'expo-font'\nimport * as React from 'react'\nexport default function useCachedResources (): boolean {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false)\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync () {\n      try {\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          IcoMoon: require('../../assets/icomoon/fonts/icomoon.ttf'),\n        })\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e)\n      } finally {\n        setLoadingComplete(true)\n      }\n    }\n\n    loadResourcesAndDataAsync()\n  }, [])\n\n  return isLoadingComplete\n}\n"]},"metadata":{},"sourceType":"module"}