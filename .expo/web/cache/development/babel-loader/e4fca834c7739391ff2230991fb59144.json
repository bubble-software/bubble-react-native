{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport { BLOCK_USER_URL, CATEGORY_URL, CHECK_EMAIL_URL, CHECK_USERNAME_URL, COMMENT_URL, CREATE_POST_URL, CREATE_USER_URL, GET_BLOCKED_USERS, GET_USER_LIKED_POSTS, GET_USER_POSTS, PASSWORD_RESET_URL, POST_COMMENT_URL, RADIUS_URL, SET_DEFAULT_CATEGORY, SUBMIT_FEEDBACK_URL, UNBLOCK_USER_URL, UPDATE_USER, VALIDATE_PASSWORD_RECOVERY_CODE_URL, VALIDATE_PASSWORD_RESET_URL, VOTE_URL } from \"../utils/constants\";\nexport var getCategoryPosts = function getCategoryPosts(postParams) {\n  var response;\n  return _regeneratorRuntime.async(function getCategoryPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'GET',\n            url: CATEGORY_URL(postParams)\n          }).catch(function (e) {\n            throw new Error(e.response.data.errors);\n          }));\n\n        case 2:\n          response = _context.sent;\n\n          if (!(response.status === 200)) {\n            _context.next = 7;\n            break;\n          }\n\n          return _context.abrupt(\"return\", response.data);\n\n        case 7:\n          if (!(response.status === 401)) {\n            _context.next = 9;\n            break;\n          }\n\n          return _context.abrupt(\"return\", undefined);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getComments = function getComments(commentParams) {\n  var response;\n  return _regeneratorRuntime.async(function getComments$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'GET',\n            url: COMMENT_URL(commentParams)\n          }).catch(function (e) {\n            throw new Error(e.response.data.errors);\n          }));\n\n        case 2:\n          response = _context2.sent;\n\n          if (!(response.status === 200)) {\n            _context2.next = 7;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", response.data);\n\n        case 7:\n          if (!(response.status === 401)) {\n            _context2.next = 9;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", undefined);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var postComment = function postComment(commentParams) {\n  var response;\n  return _regeneratorRuntime.async(function postComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'POST',\n            headers: {\n              \"Authorization\": commentParams.token\n            },\n            url: POST_COMMENT_URL,\n            data: {\n              \"post_id\": commentParams.postId,\n              content: commentParams.content\n            }\n          }).catch(function (e) {\n            throw new Error(e.response.data.errors);\n          }));\n\n        case 2:\n          response = _context3.sent;\n\n          if (!(response.status === 200)) {\n            _context3.next = 7;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", response.data);\n\n        case 7:\n          if (!(response.status === 401)) {\n            _context3.next = 9;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", undefined);\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var createPost = function createPost(newPostParams) {\n  return _regeneratorRuntime.async(function createPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"POST\",\n            url: CREATE_POST_URL,\n            headers: {\n              \"Authorization\": newPostParams.token\n            },\n            data: {\n              \"category_id\": newPostParams.categoryId,\n              \"content\": newPostParams.content,\n              \"title\": newPostParams.title,\n              \"latitude\": newPostParams.latitude,\n              \"longitude\": newPostParams.longitude\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getRadius = function getRadius(radiusParams) {\n  return _regeneratorRuntime.async(function getRadius$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"GET\",\n            url: RADIUS_URL(radiusParams)\n          }).then(function (response) {\n            if (response.status === 200) {\n              return response.data;\n            }\n          }));\n\n        case 2:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var submitVote = function submitVote(voteParams, token) {\n  return _regeneratorRuntime.async(function submitVote$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"POST\",\n            url: VOTE_URL,\n            headers: {\n              \"Authorization\": token\n            },\n            data: {\n              \"vote_type\": voteParams.voteType,\n              \"post_id\": voteParams.postId,\n              direction: voteParams.direction,\n              \"is_voted\": voteParams.isVoted,\n              \"global_direction\": voteParams.globalDirection\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getUserPosts = function getUserPosts(token) {\n  return _regeneratorRuntime.async(function getUserPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"GET\",\n            url: GET_USER_POSTS(token)\n          }).then(function (resp) {\n            if (resp.status === 200) {\n              return resp.data;\n            }\n          }));\n\n        case 2:\n          return _context7.abrupt(\"return\", _context7.sent);\n\n        case 3:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getUserLikedPosts = function getUserLikedPosts(token) {\n  return _regeneratorRuntime.async(function getUserLikedPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"GET\",\n            url: GET_USER_LIKED_POSTS(token)\n          }).then(function (resp) {\n            if (resp.status === 200) {\n              return resp.data;\n            }\n          }));\n\n        case 2:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 3:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getBlockedUsers = function getBlockedUsers(token) {\n  return _regeneratorRuntime.async(function getBlockedUsers$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"GET\",\n            url: GET_BLOCKED_USERS(token)\n          }).then(function (resp) {\n            if (resp.status === 200) {\n              return resp.data;\n            }\n          }));\n\n        case 2:\n          return _context9.abrupt(\"return\", _context9.sent);\n\n        case 3:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var unblockUser = function unblockUser(token, unblockParams) {\n  return _regeneratorRuntime.async(function unblockUser$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"POST\",\n            url: UNBLOCK_USER_URL,\n            headers: {\n              \"Authorization\": token\n            },\n            data: {\n              \"blocked_user_id\": unblockParams.blockedId\n            }\n          }).then(function (resp) {\n            if (resp.status === 200) {\n              return resp.data;\n            }\n          }));\n\n        case 2:\n          return _context10.abrupt(\"return\", _context10.sent);\n\n        case 3:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var blockUser = function blockUser(token, unblockParams) {\n  return _regeneratorRuntime.async(function blockUser$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"POST\",\n            url: BLOCK_USER_URL,\n            headers: {\n              \"Authorization\": token\n            },\n            data: {\n              \"blocked_user_id\": unblockParams,\n              \"blocked_reason\": \"\",\n              \"blocked_type\": \"\"\n            }\n          }).then(function (resp) {\n            if (resp.status === 200) {\n              return resp.data;\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var checkUsername = function checkUsername(username) {\n  var response;\n  return _regeneratorRuntime.async(function checkUsername$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"GET\",\n            url: CHECK_USERNAME_URL(username)\n          }).catch(function (e) {\n            throw e.response.data;\n          }));\n\n        case 2:\n          response = _context12.sent;\n\n          if (!(response.status === 200)) {\n            _context12.next = 5;\n            break;\n          }\n\n          return _context12.abrupt(\"return\", response.data);\n\n        case 5:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var checkEmail = function checkEmail(email) {\n  var response;\n  return _regeneratorRuntime.async(function checkEmail$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"GET\",\n            url: CHECK_EMAIL_URL(email)\n          }).catch(function (e) {\n            throw e.response.data;\n          }));\n\n        case 2:\n          response = _context13.sent;\n\n          if (!(response.status === 200)) {\n            _context13.next = 5;\n            break;\n          }\n\n          return _context13.abrupt(\"return\", response.data);\n\n        case 5:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var createUser = function createUser(registerParams) {\n  return _regeneratorRuntime.async(function createUser$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"POST\",\n            url: CREATE_USER_URL,\n            data: {\n              \"username\": registerParams.username,\n              \"user_type\": 2,\n              \"password\": registerParams.password,\n              \"email\": registerParams.email\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var passwordReset = function passwordReset(email) {\n  return _regeneratorRuntime.async(function passwordReset$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"POST\",\n            url: PASSWORD_RESET_URL,\n            data: {\n              email: email\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var validatePasswordRecoveryCode = function validatePasswordRecoveryCode(email, code) {\n  var response;\n  return _regeneratorRuntime.async(function validatePasswordRecoveryCode$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"GET\",\n            url: VALIDATE_PASSWORD_RECOVERY_CODE_URL(email, code)\n          }).catch(function (e) {\n            throw e.response.data;\n          }));\n\n        case 2:\n          response = _context16.sent;\n\n          if (!(response.status === 200)) {\n            _context16.next = 5;\n            break;\n          }\n\n          return _context16.abrupt(\"return\", response.data);\n\n        case 5:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var validatePasswordReset = function validatePasswordReset(validatePasswordParams) {\n  return _regeneratorRuntime.async(function validatePasswordReset$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          _context17.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"POST\",\n            url: VALIDATE_PASSWORD_RESET_URL,\n            data: {\n              \"password\": validatePasswordParams.password,\n              \"email\": validatePasswordParams.email,\n              \"recovery_code\": validatePasswordParams.recoveryCode\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var setDefaultCategory = function setDefaultCategory(token, category) {\n  var categoryID;\n  return _regeneratorRuntime.async(function setDefaultCategory$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.t0 = category;\n          _context18.next = _context18.t0 === 'Deals' ? 3 : _context18.t0 === 'Happy Hour' ? 5 : _context18.t0 === 'Recreation' ? 7 : _context18.t0 === 'Whats Happening' ? 9 : _context18.t0 === 'Misc' ? 11 : 13;\n          break;\n\n        case 3:\n          categoryID = 1;\n          return _context18.abrupt(\"break\", 13);\n\n        case 5:\n          categoryID = 2;\n          return _context18.abrupt(\"break\", 13);\n\n        case 7:\n          categoryID = 3;\n          return _context18.abrupt(\"break\", 13);\n\n        case 9:\n          categoryID = 4;\n          return _context18.abrupt(\"break\", 13);\n\n        case 11:\n          categoryID = 5;\n          return _context18.abrupt(\"break\", 13);\n\n        case 13:\n          _context18.next = 15;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"POST\",\n            headers: {\n              \"Authorization\": token\n            },\n            url: SET_DEFAULT_CATEGORY,\n            data: {\n              default_category_id: categoryID\n            }\n          }).then(function (resp) {\n            if (resp.status === 200) {\n              return resp.data;\n            }\n          }));\n\n        case 15:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var updateUser = function updateUser(token, updateParams) {\n  return _regeneratorRuntime.async(function updateUser$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"POST\",\n            headers: {\n              \"Authorization\": token\n            },\n            url: UPDATE_USER,\n            data: updateParams\n          }).then(function (resp) {\n            if (resp.status === 200) {\n              return resp.data;\n            }\n          }));\n\n        case 2:\n          return _context19.abrupt(\"return\", _context19.sent);\n\n        case 3:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var submitContentReview = function submitContentReview(token, contentReviewParams) {\n  return _regeneratorRuntime.async(function submitContentReview$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"POST\",\n            headers: {\n              \"Authorization\": token\n            },\n            url: SET_DEFAULT_CATEGORY,\n            data: {\n              content: contentReviewParams.content,\n              \"content_type\": contentReviewParams.contentType,\n              \"post_id\": contentReviewParams.postId,\n              \"comment_id\": contentReviewParams.commentId\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var submitFeedback = function submitFeedback(token, feedbackParams) {\n  return _regeneratorRuntime.async(function submitFeedback$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: \"POST\",\n            headers: {\n              \"Authorization\": token\n            },\n            url: SUBMIT_FEEDBACK_URL,\n            data: {\n              content: feedbackParams.content,\n              longitude: feedbackParams.longitude,\n              latitude: feedbackParams.latitude,\n              \"user_id\": feedbackParams.userId\n            }\n          }));\n\n        case 2:\n          return _context21.abrupt(\"return\", _context21.sent);\n\n        case 3:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/Users/mattdizon/Desktop/bubble-react-native/src/api/service.ts"],"names":["axios","BLOCK_USER_URL","CATEGORY_URL","CHECK_EMAIL_URL","CHECK_USERNAME_URL","COMMENT_URL","CREATE_POST_URL","CREATE_USER_URL","GET_BLOCKED_USERS","GET_USER_LIKED_POSTS","GET_USER_POSTS","PASSWORD_RESET_URL","POST_COMMENT_URL","RADIUS_URL","SET_DEFAULT_CATEGORY","SUBMIT_FEEDBACK_URL","UNBLOCK_USER_URL","UPDATE_USER","VALIDATE_PASSWORD_RECOVERY_CODE_URL","VALIDATE_PASSWORD_RESET_URL","VOTE_URL","getCategoryPosts","postParams","method","url","catch","e","Error","response","data","errors","status","undefined","getComments","commentParams","postComment","headers","token","postId","content","createPost","newPostParams","categoryId","title","latitude","longitude","getRadius","radiusParams","then","submitVote","voteParams","voteType","direction","isVoted","globalDirection","getUserPosts","resp","getUserLikedPosts","getBlockedUsers","unblockUser","unblockParams","blockedId","blockUser","checkUsername","username","checkEmail","email","createUser","registerParams","password","passwordReset","validatePasswordRecoveryCode","code","validatePasswordReset","validatePasswordParams","recoveryCode","setDefaultCategory","category","categoryID","default_category_id","updateUser","updateParams","submitContentReview","contentReviewParams","contentType","commentId","submitFeedback","feedbackParams","userId"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport { \n  BLOCK_USER_URL,\n  CATEGORY_URL,\n  CHECK_EMAIL_URL,\n  CHECK_USERNAME_URL,\n  COMMENT_URL,\n  CREATE_POST_URL,\n  CREATE_USER_URL,\n  GET_BLOCKED_USERS,\n  GET_USER,\n  GET_USER_LIKED_POSTS,\n  GET_USER_POSTS,\n  PASSWORD_RESET_URL,\n  PostsParams,\n  POST_COMMENT_URL,\n  RADIUS_URL, \n  SET_DEFAULT_CATEGORY,\n  SUBMIT_FEEDBACK_URL,\n  UNBLOCK_USER_URL,\n  UPDATE_USER,\n  VALIDATE_PASSWORD_RECOVERY_CODE_URL,\n  VALIDATE_PASSWORD_RESET_URL,\n  VOTE_URL\n} from '../utils/constants'\nimport { CONTENT_REVIEW_PARAMS, CREATE_POST_PARAMS, FEEDBACK_PARAMS, GET_COMMENTS_PARAMS, POST_COMMENT_PARAMS, RADIUS_PARAMS, REGISTER_PARAMS, UNBLOCK_PARAMS, UPDATE_USER_PARAMS, VALIDATE_PASSWORD_PARAMS, VOTE_PARAMS } from './types'\n\nexport const getCategoryPosts = async (postParams: PostsParams) => {\n  const response = await axios({\n    method: 'GET',\n    url: CATEGORY_URL(postParams),\n  }).catch((e) => {\n    throw new Error(e.response.data.errors)\n  })\n  if (response.status === 200) {\n    return response.data\n  } else if (response.status === 401) {\n    return undefined\n  }\n}\n\nexport const getComments = async (commentParams: GET_COMMENTS_PARAMS) => {\n  const response = await axios({\n    method: 'GET',\n    url: COMMENT_URL(commentParams),\n  }).catch((e) => {\n    throw new Error(e.response.data.errors)\n  })\n  if (response.status === 200) {\n    return response.data\n  } else if (response.status === 401) {\n    return undefined\n  }\n}\n\nexport const postComment = async (commentParams: POST_COMMENT_PARAMS) => {\n  const response = await axios({\n    method: 'POST',\n    headers:{\n      \"Authorization\": commentParams.token\n    },\n    url: POST_COMMENT_URL,\n    data:{\n      \"post_id\": commentParams.postId,\n      content: commentParams.content,\n    }\n  }).catch((e) => {\n    throw new Error(e.response.data.errors)\n  })\n  if (response.status === 200) {\n    return response.data\n  } else if (response.status === 401) {\n    return undefined\n  }\n}\n\nexport const createPost = async(newPostParams: CREATE_POST_PARAMS) => {\n  await axios({\n      method : \"POST\",\n      url: CREATE_POST_URL,\n      headers:{\n        \"Authorization\": newPostParams.token\n      },\n      data: {\n        \"category_id\": newPostParams.categoryId,\n        \"content\": newPostParams.content,\n        \"title\": newPostParams.title,\n        \"latitude\": newPostParams.latitude,\n        \"longitude\": newPostParams.longitude\n      }\n  })\n}\n\nexport const getRadius = async(radiusParams: RADIUS_PARAMS) => (\n  await axios({\n    method : \"GET\",\n    url: RADIUS_URL(radiusParams),\n  }).then((response) => {\n    if (response.status === 200){\n      return response.data\n    }\n  })\n)\n\nexport const submitVote = async(voteParams: VOTE_PARAMS, token: string) => {\n  await axios({\n      method : \"POST\",\n      url: VOTE_URL,\n      headers: {\n        \"Authorization\": token\n      },\n      data: {\n        \"vote_type\": voteParams.voteType,\n        \"post_id\": voteParams.postId,\n        direction: voteParams.direction,\n        \"is_voted\": voteParams.isVoted,\n        \"global_direction\": voteParams.globalDirection\n      }\n    })\n}\n\nexport const getUserPosts = async(token: string) => {\n  return await axios({\n    method : \"GET\",\n    url: GET_USER_POSTS(token)\n  }).then((resp) => {\n    if(resp.status === 200){\n      return resp.data\n    }\n  })\n}\n\nexport const getUserLikedPosts = async(token: string) => (\n  await axios({\n    method : \"GET\",\n    url: GET_USER_LIKED_POSTS(token),\n  }).then((resp) => {\n    if(resp.status === 200){\n      return resp.data\n    }\n  })\n)\n\n\nexport const getBlockedUsers = async(token: string) => (\n  await axios({\n    method : \"GET\",\n    url: GET_BLOCKED_USERS(token),\n  }).then((resp) => {\n    if(resp.status === 200){\n      return resp.data\n    }\n  })\n)\n\nexport const unblockUser = async(token: string, unblockParams: UNBLOCK_PARAMS) => (\n  await axios({\n    method : \"POST\",\n    url: UNBLOCK_USER_URL,\n    headers:{\n      \"Authorization\": token\n    },\n    data:{\n      \"blocked_user_id\": unblockParams.blockedId\n    }\n  }).then((resp) => {\n    if(resp.status === 200){\n      return resp.data\n    }\n  })\n)\n\nexport const blockUser = async(token: string, unblockParams: UNBLOCK_PARAMS) => {\n  await axios({\n    method : \"POST\",\n    url: BLOCK_USER_URL,\n    headers:{\n      \"Authorization\": token\n    },\n    data:{\n      \"blocked_user_id\": unblockParams,\n      \"blocked_reason\": \"\",\n      \"blocked_type\": \"\"\n    }\n  }).then((resp) => {\n    if(resp.status === 200){\n      return resp.data\n    }\n  })\n}\n\nexport const checkUsername = async(username: string) => {\n  const response = await axios({\n    method : \"GET\",\n    url: CHECK_USERNAME_URL(username),\n  }).catch((e) => {\n    throw (e.response.data)\n  })\n  if(response.status === 200){\n    return response.data\n  }\n}\n\nexport const checkEmail = async(email: string) => {\n  const response = await axios({\n    method : \"GET\",\n    url: CHECK_EMAIL_URL(email),\n  }).catch((e) => {\n    throw (e.response.data)\n  })\n  if(response.status === 200){\n    return response.data\n  }\n}\n\nexport const createUser = async(registerParams: REGISTER_PARAMS) => {\n  await axios({\n    method : \"POST\",\n    url: CREATE_USER_URL,\n    data: {\n      \"username\": registerParams.username,\n      \"user_type\": 2,\n      \"password\": registerParams.password,\n      \"email\": registerParams.email\n    }\n  })\n}\n\nexport const passwordReset = async(email: string) => {\n  await axios({\n    method : \"POST\",\n    url: PASSWORD_RESET_URL,\n    data: {\n      email\n    }\n  })\n}\n\nexport const validatePasswordRecoveryCode = async(email: string, code: string) => {\n  const response = await axios({\n    method : \"GET\",\n    url: VALIDATE_PASSWORD_RECOVERY_CODE_URL(email, code),\n  }).catch((e) => {\n    throw (e.response.data)\n  })\n  if(response.status === 200){\n    return response.data\n  }\n}\n\nexport const validatePasswordReset = async(validatePasswordParams: VALIDATE_PASSWORD_PARAMS) => {\n  await axios({\n    method : \"POST\",\n    url: VALIDATE_PASSWORD_RESET_URL,\n    data: {\n      \"password\": validatePasswordParams.password,\n      \"email\": validatePasswordParams.email,\n      \"recovery_code\": validatePasswordParams.recoveryCode\n    }\n  })\n}\n\nexport const setDefaultCategory = async(token: string, category: string) => {\n  let categoryID\n  switch (category){\n    case 'Deals':\n      categoryID = 1\n      break\n    case 'Happy Hour':\n      categoryID = 2\n      break\n    case 'Recreation':\n      categoryID = 3\n      break\n    case 'Whats Happening':\n      categoryID = 4\n      break\n    case 'Misc':\n      categoryID = 5\n      break\n  }\n  await axios({\n    method : \"POST\",\n    headers: {\n      \"Authorization\": token\n    },\n    url: SET_DEFAULT_CATEGORY,\n    data: {\n      default_category_id: categoryID\n    }\n  }).then((resp) => {\n    if(resp.status === 200){\n      return resp.data\n    }\n  })\n}\n\nexport const updateUser = async (token: string, updateParams: UPDATE_USER_PARAMS) => (\n  await axios({\n    method : \"POST\",\n    headers: {\n      \"Authorization\": token\n    },\n    url: UPDATE_USER,\n    data: updateParams\n  }).then((resp) => {\n    if(resp.status === 200){\n      return resp.data\n    }\n  })\n)\n\nexport const submitContentReview = async(token: string, contentReviewParams: CONTENT_REVIEW_PARAMS) => {\n  await axios({\n    method : \"POST\",\n    headers: {\n      \"Authorization\": token\n    },\n    url: SET_DEFAULT_CATEGORY,\n    data: {\n      content: contentReviewParams.content,\n      \"content_type\": contentReviewParams.contentType,\n      \"post_id\": contentReviewParams.postId,\n      \"comment_id\": contentReviewParams.commentId\n    }\n  })\n}\n\nexport const submitFeedback = async (token: string, feedbackParams: FEEDBACK_PARAMS) => (\n  await axios({\n    method : \"POST\",\n    headers: {\n      \"Authorization\": token\n    },\n    url: SUBMIT_FEEDBACK_URL,\n    data: {\n      content: feedbackParams.content,\n      longitude: feedbackParams.longitude,\n      latitude: feedbackParams.latitude,\n      \"user_id\": feedbackParams.userId\n    }\n  })\n)"]},"metadata":{},"sourceType":"module"}