{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport axios from 'axios';\nimport { BLOCK_USER_URL, CATEGORY_URL, CHECK_EMAIL_URL, CHECK_USERNAME_URL, COMMENT_URL, CREATE_POST_URL, CREATE_USER_URL, GET_BLOCKED_USERS, GET_USER_LIKED_POSTS, GET_USER_POSTS, PASSWORD_RESET_URL, POST_COMMENT_URL, RADIUS_URL, SET_DEFAULT_CATEGORY, SUBMIT_FEEDBACK_URL, UNBLOCK_USER_URL, UPDATE_USER, VALIDATE_PASSWORD_RECOVERY_CODE_URL, VALIDATE_PASSWORD_RESET_URL, VOTE_URL } from \"../utils/constants\";\nimport { keysToCamel } from \"../utils/stringhelpers\";\nexport var getCategoryPosts = function getCategoryPosts(postParams) {\n  var response;\n  return _regeneratorRuntime.async(function getCategoryPosts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'GET',\n            url: CATEGORY_URL(postParams)\n          }).catch(function (e) {\n            throw new Error(e.response.data.errors);\n          }));\n\n        case 2:\n          response = _context.sent;\n\n          if (!(response.status === 200)) {\n            _context.next = 7;\n            break;\n          }\n\n          return _context.abrupt(\"return\", keysToCamel(response.data));\n\n        case 7:\n          if (!(response.status === 401)) {\n            _context.next = 9;\n            break;\n          }\n\n          return _context.abrupt(\"return\", undefined);\n\n        case 9:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getComments = function getComments(commentParams) {\n  var response;\n  return _regeneratorRuntime.async(function getComments$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          _context2.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'GET',\n            url: COMMENT_URL(commentParams)\n          }).catch(function (e) {\n            throw new Error(e.response.data.errors);\n          }));\n\n        case 2:\n          response = _context2.sent;\n\n          if (!(response.status === 200)) {\n            _context2.next = 7;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", keysToCamel(response.data));\n\n        case 7:\n          if (!(response.status === 401)) {\n            _context2.next = 9;\n            break;\n          }\n\n          return _context2.abrupt(\"return\", undefined);\n\n        case 9:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var postComment = function postComment(commentParams) {\n  var response;\n  return _regeneratorRuntime.async(function postComment$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'POST',\n            headers: {\n              Authorization: commentParams.token\n            },\n            url: POST_COMMENT_URL,\n            data: {\n              post_id: commentParams.postId,\n              content: commentParams.content\n            }\n          }).catch(function (e) {\n            throw new Error(e.response.data.errors);\n          }));\n\n        case 2:\n          response = _context3.sent;\n\n          if (!(response.status === 200)) {\n            _context3.next = 7;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", response.data);\n\n        case 7:\n          if (!(response.status === 401)) {\n            _context3.next = 9;\n            break;\n          }\n\n          return _context3.abrupt(\"return\", undefined);\n\n        case 9:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var createPost = function createPost(newPostParams) {\n  var response;\n  return _regeneratorRuntime.async(function createPost$(_context4) {\n    while (1) {\n      switch (_context4.prev = _context4.next) {\n        case 0:\n          _context4.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'POST',\n            url: CREATE_POST_URL,\n            headers: {\n              Authorization: newPostParams.token\n            },\n            data: {\n              category_id: newPostParams.categoryId,\n              content: newPostParams.content,\n              title: newPostParams.title,\n              latitude: newPostParams.latitude,\n              longitude: newPostParams.longitude\n            }\n          }));\n\n        case 2:\n          response = _context4.sent;\n\n          if (!(response.status === 200)) {\n            _context4.next = 7;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", response.data);\n\n        case 7:\n          if (!(response.status === 401)) {\n            _context4.next = 9;\n            break;\n          }\n\n          return _context4.abrupt(\"return\", undefined);\n\n        case 9:\n        case \"end\":\n          return _context4.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getRadius = function getRadius(radiusParams) {\n  return _regeneratorRuntime.async(function getRadius$(_context5) {\n    while (1) {\n      switch (_context5.prev = _context5.next) {\n        case 0:\n          _context5.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'GET',\n            url: RADIUS_URL(radiusParams)\n          }).then(function (response) {\n            if (response.status === 200) {\n              return response.data;\n            }\n          }));\n\n        case 2:\n          return _context5.abrupt(\"return\", _context5.sent);\n\n        case 3:\n        case \"end\":\n          return _context5.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var submitVote = function submitVote(voteParams, token) {\n  var response;\n  return _regeneratorRuntime.async(function submitVote$(_context6) {\n    while (1) {\n      switch (_context6.prev = _context6.next) {\n        case 0:\n          _context6.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'POST',\n            url: VOTE_URL,\n            headers: {\n              Authorization: token\n            },\n            data: {\n              vote_type: voteParams.voteType,\n              post_id: voteParams.postId,\n              direction: voteParams.direction,\n              is_voted: voteParams.isVoted,\n              global_direction: voteParams.globalDirection\n            }\n          }));\n\n        case 2:\n          response = _context6.sent;\n\n          if (!(response.status === 200)) {\n            _context6.next = 7;\n            break;\n          }\n\n          return _context6.abrupt(\"return\", response.data);\n\n        case 7:\n          if (!(response.status === 401)) {\n            _context6.next = 9;\n            break;\n          }\n\n          return _context6.abrupt(\"return\", undefined);\n\n        case 9:\n        case \"end\":\n          return _context6.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getUserPosts = function getUserPosts(token) {\n  return _regeneratorRuntime.async(function getUserPosts$(_context7) {\n    while (1) {\n      switch (_context7.prev = _context7.next) {\n        case 0:\n          _context7.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'GET',\n            url: GET_USER_POSTS(token)\n          }).then(function (resp) {\n            if (resp.status === 200) {\n              return keysToCamel(resp.data);\n            }\n          }));\n\n        case 2:\n          return _context7.abrupt(\"return\", _context7.sent);\n\n        case 3:\n        case \"end\":\n          return _context7.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getUserLikedPosts = function getUserLikedPosts(token) {\n  return _regeneratorRuntime.async(function getUserLikedPosts$(_context8) {\n    while (1) {\n      switch (_context8.prev = _context8.next) {\n        case 0:\n          _context8.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'GET',\n            url: GET_USER_LIKED_POSTS(token)\n          }).then(function (resp) {\n            if (resp.status === 200) {\n              return keysToCamel(resp.data);\n            }\n          }));\n\n        case 2:\n          return _context8.abrupt(\"return\", _context8.sent);\n\n        case 3:\n        case \"end\":\n          return _context8.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var getBlockedUsers = function getBlockedUsers(token) {\n  return _regeneratorRuntime.async(function getBlockedUsers$(_context9) {\n    while (1) {\n      switch (_context9.prev = _context9.next) {\n        case 0:\n          _context9.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'GET',\n            url: GET_BLOCKED_USERS(token)\n          }).then(function (resp) {\n            if (resp.status === 200) {\n              return keysToCamel(resp.data);\n            }\n          }));\n\n        case 2:\n          return _context9.abrupt(\"return\", _context9.sent);\n\n        case 3:\n        case \"end\":\n          return _context9.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var unblockUser = function unblockUser(token, unblockParams) {\n  return _regeneratorRuntime.async(function unblockUser$(_context10) {\n    while (1) {\n      switch (_context10.prev = _context10.next) {\n        case 0:\n          _context10.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'POST',\n            url: UNBLOCK_USER_URL,\n            headers: {\n              Authorization: token\n            },\n            data: {\n              blocked_user_id: unblockParams\n            }\n          }).then(function (resp) {\n            console.log(resp.data);\n\n            if (resp.status === 200) {\n              return resp.data;\n            }\n          }));\n\n        case 2:\n          return _context10.abrupt(\"return\", _context10.sent);\n\n        case 3:\n        case \"end\":\n          return _context10.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var blockUser = function blockUser(token, unblockParams) {\n  return _regeneratorRuntime.async(function blockUser$(_context11) {\n    while (1) {\n      switch (_context11.prev = _context11.next) {\n        case 0:\n          _context11.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'POST',\n            url: BLOCK_USER_URL,\n            headers: {\n              Authorization: token\n            },\n            data: {\n              blocked_user_id: unblockParams,\n              blocked_reason: '',\n              blocked_type: ''\n            }\n          }).then(function (resp) {\n            if (resp.status === 200) {\n              return resp.data;\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context11.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var checkUsername = function checkUsername(username) {\n  var response;\n  return _regeneratorRuntime.async(function checkUsername$(_context12) {\n    while (1) {\n      switch (_context12.prev = _context12.next) {\n        case 0:\n          _context12.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'GET',\n            url: CHECK_USERNAME_URL(username)\n          }).catch(function (e) {\n            throw e.response.data;\n          }));\n\n        case 2:\n          response = _context12.sent;\n\n          if (!(response.status === 200)) {\n            _context12.next = 5;\n            break;\n          }\n\n          return _context12.abrupt(\"return\", response.data);\n\n        case 5:\n        case \"end\":\n          return _context12.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var checkEmail = function checkEmail(email) {\n  var response;\n  return _regeneratorRuntime.async(function checkEmail$(_context13) {\n    while (1) {\n      switch (_context13.prev = _context13.next) {\n        case 0:\n          _context13.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'GET',\n            url: CHECK_EMAIL_URL(email)\n          }).catch(function (e) {\n            throw e.response.data;\n          }));\n\n        case 2:\n          response = _context13.sent;\n\n          if (!(response.status === 200)) {\n            _context13.next = 5;\n            break;\n          }\n\n          return _context13.abrupt(\"return\", response.data);\n\n        case 5:\n        case \"end\":\n          return _context13.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var createUser = function createUser(registerParams) {\n  return _regeneratorRuntime.async(function createUser$(_context14) {\n    while (1) {\n      switch (_context14.prev = _context14.next) {\n        case 0:\n          _context14.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'POST',\n            url: CREATE_USER_URL,\n            data: {\n              username: registerParams.username,\n              user_type: 2,\n              password: registerParams.password,\n              email: registerParams.email\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context14.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var passwordReset = function passwordReset(email) {\n  return _regeneratorRuntime.async(function passwordReset$(_context15) {\n    while (1) {\n      switch (_context15.prev = _context15.next) {\n        case 0:\n          _context15.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'POST',\n            url: PASSWORD_RESET_URL,\n            data: {\n              email: email\n            }\n          }));\n\n        case 2:\n        case \"end\":\n          return _context15.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var validatePasswordRecoveryCode = function validatePasswordRecoveryCode(email, code) {\n  var response;\n  return _regeneratorRuntime.async(function validatePasswordRecoveryCode$(_context16) {\n    while (1) {\n      switch (_context16.prev = _context16.next) {\n        case 0:\n          _context16.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'GET',\n            url: VALIDATE_PASSWORD_RECOVERY_CODE_URL(email, code)\n          }).catch(function (e) {\n            throw e.response.data;\n          }));\n\n        case 2:\n          response = _context16.sent;\n\n          if (!(response.status === 200)) {\n            _context16.next = 5;\n            break;\n          }\n\n          return _context16.abrupt(\"return\", response.data);\n\n        case 5:\n        case \"end\":\n          return _context16.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var validatePasswordReset = function validatePasswordReset(validatePasswordParams) {\n  return _regeneratorRuntime.async(function validatePasswordReset$(_context17) {\n    while (1) {\n      switch (_context17.prev = _context17.next) {\n        case 0:\n          console.log(VALIDATE_PASSWORD_RESET_URL, validatePasswordParams);\n          _context17.next = 3;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'POST',\n            url: VALIDATE_PASSWORD_RESET_URL,\n            data: {\n              password: validatePasswordParams.password,\n              email: validatePasswordParams.email,\n              recovery_code: validatePasswordParams.recoveryCode\n            }\n          }));\n\n        case 3:\n        case \"end\":\n          return _context17.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var setDefaultCategory = function setDefaultCategory(token, category) {\n  var categoryID, resp;\n  return _regeneratorRuntime.async(function setDefaultCategory$(_context18) {\n    while (1) {\n      switch (_context18.prev = _context18.next) {\n        case 0:\n          _context18.t0 = category;\n          _context18.next = _context18.t0 === 'Deals' ? 3 : _context18.t0 === 'Happy Hour' ? 5 : _context18.t0 === 'Recreation' ? 7 : _context18.t0 === 'Whats Happening' ? 9 : _context18.t0 === 'Misc' ? 11 : 13;\n          break;\n\n        case 3:\n          categoryID = 1;\n          return _context18.abrupt(\"break\", 13);\n\n        case 5:\n          categoryID = 2;\n          return _context18.abrupt(\"break\", 13);\n\n        case 7:\n          categoryID = 3;\n          return _context18.abrupt(\"break\", 13);\n\n        case 9:\n          categoryID = 4;\n          return _context18.abrupt(\"break\", 13);\n\n        case 11:\n          categoryID = 5;\n          return _context18.abrupt(\"break\", 13);\n\n        case 13:\n          _context18.next = 15;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'POST',\n            headers: {\n              Authorization: token\n            },\n            url: SET_DEFAULT_CATEGORY,\n            data: {\n              default_category_id: categoryID\n            }\n          }));\n\n        case 15:\n          resp = _context18.sent;\n\n          if (!(resp.status === 200)) {\n            _context18.next = 18;\n            break;\n          }\n\n          return _context18.abrupt(\"return\", resp.data);\n\n        case 18:\n        case \"end\":\n          return _context18.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var updateUser = function updateUser(token, updateParams) {\n  var resp;\n  return _regeneratorRuntime.async(function updateUser$(_context19) {\n    while (1) {\n      switch (_context19.prev = _context19.next) {\n        case 0:\n          _context19.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'POST',\n            headers: {\n              Authorization: token\n            },\n            url: UPDATE_USER,\n            data: updateParams\n          }));\n\n        case 2:\n          resp = _context19.sent;\n\n          if (!(resp.status === 200)) {\n            _context19.next = 5;\n            break;\n          }\n\n          return _context19.abrupt(\"return\", resp.data);\n\n        case 5:\n        case \"end\":\n          return _context19.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var submitContentReview = function submitContentReview(token, contentReviewParams) {\n  var resp;\n  return _regeneratorRuntime.async(function submitContentReview$(_context20) {\n    while (1) {\n      switch (_context20.prev = _context20.next) {\n        case 0:\n          _context20.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'POST',\n            headers: {\n              Authorization: token\n            },\n            url: SET_DEFAULT_CATEGORY,\n            data: {\n              content: contentReviewParams.content,\n              content_type: contentReviewParams.contentType,\n              post_id: contentReviewParams.postId,\n              comment_id: contentReviewParams.commentId\n            }\n          }));\n\n        case 2:\n          resp = _context20.sent;\n\n          if (!(resp.status === 200)) {\n            _context20.next = 5;\n            break;\n          }\n\n          return _context20.abrupt(\"return\", resp.data);\n\n        case 5:\n        case \"end\":\n          return _context20.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nexport var submitFeedback = function submitFeedback(token, feedbackParams) {\n  var resp;\n  return _regeneratorRuntime.async(function submitFeedback$(_context21) {\n    while (1) {\n      switch (_context21.prev = _context21.next) {\n        case 0:\n          _context21.next = 2;\n          return _regeneratorRuntime.awrap(axios({\n            method: 'POST',\n            headers: {\n              Authorization: token\n            },\n            url: SUBMIT_FEEDBACK_URL,\n            data: {\n              content: feedbackParams.content,\n              longitude: feedbackParams.longitude,\n              latitude: feedbackParams.latitude,\n              user_id: feedbackParams.userId\n            }\n          }));\n\n        case 2:\n          resp = _context21.sent;\n\n          if (!(resp.status === 200)) {\n            _context21.next = 5;\n            break;\n          }\n\n          return _context21.abrupt(\"return\", resp.data);\n\n        case 5:\n        case \"end\":\n          return _context21.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/Users/mattdizon/Desktop/use this /bubble-react-native/src/api/service.ts"],"names":["axios","BLOCK_USER_URL","CATEGORY_URL","CHECK_EMAIL_URL","CHECK_USERNAME_URL","COMMENT_URL","CREATE_POST_URL","CREATE_USER_URL","GET_BLOCKED_USERS","GET_USER_LIKED_POSTS","GET_USER_POSTS","PASSWORD_RESET_URL","POST_COMMENT_URL","RADIUS_URL","SET_DEFAULT_CATEGORY","SUBMIT_FEEDBACK_URL","UNBLOCK_USER_URL","UPDATE_USER","VALIDATE_PASSWORD_RECOVERY_CODE_URL","VALIDATE_PASSWORD_RESET_URL","VOTE_URL","keysToCamel","getCategoryPosts","postParams","method","url","catch","e","Error","response","data","errors","status","undefined","getComments","commentParams","postComment","headers","Authorization","token","post_id","postId","content","createPost","newPostParams","category_id","categoryId","title","latitude","longitude","getRadius","radiusParams","then","submitVote","voteParams","vote_type","voteType","direction","is_voted","isVoted","global_direction","globalDirection","getUserPosts","resp","getUserLikedPosts","getBlockedUsers","unblockUser","unblockParams","blocked_user_id","console","log","blockUser","blocked_reason","blocked_type","checkUsername","username","checkEmail","email","createUser","registerParams","user_type","password","passwordReset","validatePasswordRecoveryCode","code","validatePasswordReset","validatePasswordParams","recovery_code","recoveryCode","setDefaultCategory","category","categoryID","default_category_id","updateUser","updateParams","submitContentReview","contentReviewParams","content_type","contentType","comment_id","commentId","submitFeedback","feedbackParams","user_id","userId"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport {\n  BLOCK_USER_URL,\n  CATEGORY_URL,\n  CHECK_EMAIL_URL,\n  CHECK_USERNAME_URL,\n  COMMENT_URL,\n  CREATE_POST_URL,\n  CREATE_USER_URL,\n  GET_BLOCKED_USERS,\n  GET_USER_LIKED_POSTS,\n  GET_USER_POSTS,\n  PASSWORD_RESET_URL,\n  PostsParams,\n  POST_COMMENT_URL,\n  RADIUS_URL,\n  SET_DEFAULT_CATEGORY,\n  SUBMIT_FEEDBACK_URL,\n  UNBLOCK_USER_URL,\n  UPDATE_USER,\n  VALIDATE_PASSWORD_RECOVERY_CODE_URL,\n  VALIDATE_PASSWORD_RESET_URL,\n  VOTE_URL,\n} from '../utils/constants'\nimport { keysToCamel } from '../utils/stringhelpers'\nimport { BlockedUser, Category, Comment, CONTENT_REVIEW_PARAMS, CREATE_POST_PARAMS, FEEDBACK_PARAMS, GET_COMMENTS_PARAMS, Post, POST_COMMENT_PARAMS, RADIUS_PARAMS, REGISTER_PARAMS, UNBLOCK_PARAMS, UPDATE_USER_PARAMS, VALIDATE_PASSWORD_PARAMS, VOTE_PARAMS } from './types'\n\nexport const getCategoryPosts = async (postParams: PostsParams): Promise<Post[] | undefined> => {\n  const response = await axios({\n    method: 'GET',\n    url: CATEGORY_URL(postParams),\n  }).catch((e) => {\n    throw new Error(e.response.data.errors)\n  })\n  if (response.status === 200) {\n    return keysToCamel(response.data) as Post[]\n  } else if (response.status === 401) {\n    return undefined\n  }\n}\n\nexport const getComments = async (commentParams: GET_COMMENTS_PARAMS): Promise<Comment[] | undefined> => {\n  const response = await axios({\n    method: 'GET',\n    url: COMMENT_URL(commentParams),\n  }).catch((e) => {\n    throw new Error(e.response.data.errors)\n  })\n  if (response.status === 200) {\n    return keysToCamel(response.data) as Comment[]\n  } else if (response.status === 401) {\n    return undefined\n  }\n}\n\nexport const postComment = async (commentParams: POST_COMMENT_PARAMS): Promise<string | undefined> => {\n  const response = await axios({\n    method: 'POST',\n    headers: {\n      Authorization: commentParams.token,\n    },\n    url: POST_COMMENT_URL,\n    data: {\n      post_id: commentParams.postId,\n      content: commentParams.content,\n    },\n  }).catch((e) => {\n    throw new Error(e.response.data.errors)\n  })\n  if (response.status === 200) {\n    return response.data\n  } else if (response.status === 401) {\n    return undefined\n  }\n}\n\nexport const createPost = async (newPostParams: CREATE_POST_PARAMS):Promise<string | undefined> => {\n  const response = await axios({\n    method: 'POST',\n    url: CREATE_POST_URL,\n    headers: {\n      Authorization: newPostParams.token,\n    },\n    data: {\n      category_id: newPostParams.categoryId,\n      content: newPostParams.content,\n      title: newPostParams.title,\n      latitude: newPostParams.latitude,\n      longitude: newPostParams.longitude,\n    },\n  })\n  if (response.status === 200) {\n    return response.data\n  } else if (response.status === 401) {\n    return undefined\n  }\n}\n\nexport const getRadius = async (radiusParams: RADIUS_PARAMS): Promise<number | undefined> => (\n  await axios({\n    method: 'GET',\n    url: RADIUS_URL(radiusParams),\n  }).then((response) => {\n    if (response.status === 200) {\n      return response.data\n    }\n  })\n)\n\nexport const submitVote = async (voteParams: VOTE_PARAMS, token: string): Promise<string | undefined> => {\n  const response = await axios({\n    method: 'POST',\n    url: VOTE_URL,\n    headers: {\n      Authorization: token,\n    },\n    data: {\n      vote_type: voteParams.voteType,\n      post_id: voteParams.postId,\n      direction: voteParams.direction,\n      is_voted: voteParams.isVoted,\n      global_direction: voteParams.globalDirection,\n    },\n  })\n  if (response.status === 200) {\n    return response.data\n  } else if (response.status === 401) {\n    return undefined\n  }\n}\n\nexport const getUserPosts = async (token: string): Promise<Post[] | undefined> => {\n  return await axios({\n    method: 'GET',\n    url: GET_USER_POSTS(token),\n  }).then((resp) => {\n    if (resp.status === 200) {\n      return keysToCamel(resp.data) as Post[]\n    }\n  })\n}\n\nexport const getUserLikedPosts = async (token: string): Promise<Post[] | undefined> => (\n  await axios({\n    method: 'GET',\n    url: GET_USER_LIKED_POSTS(token),\n  }).then((resp) => {\n    if (resp.status === 200) {\n      return keysToCamel(resp.data) as Post[]\n    }\n  })\n)\n\nexport const getBlockedUsers = async (token: string): Promise<BlockedUser[] | undefined> => (\n  await axios({\n    method: 'GET',\n    url: GET_BLOCKED_USERS(token),\n  }).then((resp) => {\n    if (resp.status === 200) {\n      return keysToCamel(resp.data) as BlockedUser[]\n    }\n  })\n)\n\nexport const unblockUser = async (token: string, unblockParams: UNBLOCK_PARAMS): Promise<void> => (\n  await axios({\n    method: 'POST',\n    url: UNBLOCK_USER_URL,\n    headers: {\n      Authorization: token,\n    },\n    data: {\n      blocked_user_id: unblockParams,\n    },\n  }).then((resp) => {\n    console.log(resp.data)\n    if (resp.status === 200) {\n      return resp.data\n    }\n  })\n)\n\nexport const blockUser = async (token: string, unblockParams: UNBLOCK_PARAMS): Promise<void> => {\n  await axios({\n    method: 'POST',\n    url: BLOCK_USER_URL,\n    headers: {\n      Authorization: token,\n    },\n    data: {\n      blocked_user_id: unblockParams,\n      blocked_reason: '',\n      blocked_type: '',\n    },\n  }).then((resp) => {\n    if (resp.status === 200) {\n      return resp.data\n    }\n  })\n}\n\nexport const checkUsername = async (username: string): Promise<void> => {\n  const response = await axios({\n    method: 'GET',\n    url: CHECK_USERNAME_URL(username),\n  }).catch((e) => {\n    throw (e.response.data)\n  })\n  if (response.status === 200) {\n    return response.data\n  }\n}\n\nexport const checkEmail = async (email: string): Promise<void> => {\n  const response = await axios({\n    method: 'GET',\n    url: CHECK_EMAIL_URL(email),\n  }).catch((e) => {\n    throw (e.response.data)\n  })\n  if (response.status === 200) {\n    return response.data\n  }\n}\n\nexport const createUser = async (registerParams: REGISTER_PARAMS): Promise<void> => {\n  await axios({\n    method: 'POST',\n    url: CREATE_USER_URL,\n    data: {\n      username: registerParams.username,\n      user_type: 2,\n      password: registerParams.password,\n      email: registerParams.email,\n    },\n  })\n}\n\nexport const passwordReset = async (email: string): Promise<void> => {\n  await axios({\n    method: 'POST',\n    url: PASSWORD_RESET_URL,\n    data: {\n      email,\n    },\n  })\n}\n\nexport const validatePasswordRecoveryCode = async (email: string, code: string): Promise<void> => {\n  const response = await axios({\n    method: 'GET',\n    url: VALIDATE_PASSWORD_RECOVERY_CODE_URL(email, code),\n  }).catch((e) => {\n    throw (e.response.data)\n  })\n  if (response.status === 200) {\n    return response.data\n  }\n}\n\nexport const validatePasswordReset = async (validatePasswordParams: VALIDATE_PASSWORD_PARAMS): Promise<void> => {\n  console.log(VALIDATE_PASSWORD_RESET_URL,validatePasswordParams )\n  await axios({\n    method: 'POST',\n    url: VALIDATE_PASSWORD_RESET_URL,\n    data: {\n      password: validatePasswordParams.password,\n      email: validatePasswordParams.email,\n      recovery_code: validatePasswordParams.recoveryCode,\n    },\n  })\n}\n\nexport const setDefaultCategory = async (token: string, category: Category): Promise<number | undefined> => {\n  let categoryID\n  switch (category) {\n    case 'Deals':\n      categoryID = 1\n      break\n    case 'Happy Hour':\n      categoryID = 2\n      break\n    case 'Recreation':\n      categoryID = 3\n      break\n    case 'Whats Happening':\n      categoryID = 4\n      break\n    case 'Misc':\n      categoryID = 5\n      break\n  }\n  const resp = await axios({\n    method: 'POST',\n    headers: {\n      Authorization: token,\n    },\n    url: SET_DEFAULT_CATEGORY,\n    data: {\n      default_category_id: categoryID,\n    },\n  })\n  if (resp.status === 200) {\n    return resp.data\n  }\n}\n\nexport const updateUser = async (token: string, updateParams: UPDATE_USER_PARAMS): Promise<undefined> => {\n  const resp = await axios({\n    method: 'POST',\n    headers: {\n      Authorization: token,\n    },\n    url: UPDATE_USER,\n    data: updateParams,\n  })\n  if (resp.status === 200) {\n    return resp.data\n  }\n}\n\nexport const submitContentReview = async (token: string, contentReviewParams: CONTENT_REVIEW_PARAMS): Promise<undefined> => {\n  const resp = await axios({\n    method: 'POST',\n    headers: {\n      Authorization: token,\n    },\n    url: SET_DEFAULT_CATEGORY,\n    data: {\n      content: contentReviewParams.content,\n      content_type: contentReviewParams.contentType,\n      post_id: contentReviewParams.postId,\n      comment_id: contentReviewParams.commentId,\n    },\n  })\n  if (resp.status === 200) {\n    return resp.data\n  }\n}\n\nexport const submitFeedback = async (token: string, feedbackParams: FEEDBACK_PARAMS): Promise<undefined> => {\n  const resp = await axios({\n    method: 'POST',\n    headers: {\n      Authorization: token,\n    },\n    url: SUBMIT_FEEDBACK_URL,\n    data: {\n      content: feedbackParams.content,\n      longitude: feedbackParams.longitude,\n      latitude: feedbackParams.latitude,\n      user_id: feedbackParams.userId,\n    },\n  })\n  if (resp.status === 200) {\n    return resp.data\n  }\n}\n"]},"metadata":{},"sourceType":"module"}