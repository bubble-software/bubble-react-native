{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mattdizon/Desktop/bubble-react-native/src/auth/IsAuthenticated.tsx\";\n\nimport React, { useEffect } from 'react';\nimport { useState } from 'react';\nimport { getAsyncStorageItem } from \"../utils/asyncStorage\";\nimport { createStackNavigator } from '@react-navigation/stack';\nimport { Login } from \"../screens/Login/Login\";\nimport { RegistrationStack } from \"../stacks/RegistrationStack/RegistrationStack\";\nimport { ForgotPasswordStack } from \"../stacks/ForgotPasswordStack/ForgotPasswordStack\";\nimport { AuthenticatedStack } from \"../stacks/AuthenticatedStack/AuthenticatedStack\";\nimport jwt_decode from 'jwt-decode';\nimport { keysToCamel } from \"../utils/stringhelpers\";\nimport { UserContext } from \"../providers/UserProvider/UserProvider\";\nexport var IsAuthenticated = function IsAuthenticated(_ref) {\n  var credentials = _ref.credentials;\n\n  var _useState = useState(null),\n      _useState2 = _slicedToArray(_useState, 2),\n      me = _useState2[0],\n      setMe = _useState2[1];\n\n  useEffect(function () {\n    if (credentials) {\n      var userDecoded = jwt_decode(credentials);\n      setMe(keysToCamel(userDecoded));\n    }\n  }, [credentials]);\n  var userContext = React.useMemo(function () {\n    return {\n      me: me,\n      setMe: setMe\n    };\n  }, [credentials]);\n  useEffect(function () {\n    getAsyncStorageItem('me').then(function (res) {\n      if (res !== null) {\n        setMe(JSON.parse(res));\n      }\n    });\n  }, []);\n  var RootStack = createStackNavigator();\n  return React.createElement(UserContext.Provider, {\n    value: userContext,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 5\n    }\n  }, React.createElement(RootStack.Navigator, {\n    mode: \"modal\",\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }\n  }, credentials ? React.createElement(RootStack.Screen, {\n    name: \"Authenticated\",\n    component: AuthenticatedStack,\n    options: {\n      headerShown: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 13\n    }\n  }) : React.createElement(React.Fragment, null, React.createElement(RootStack.Screen, {\n    name: \"Login\",\n    component: Login,\n    options: {\n      headerShown: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 15\n    }\n  }), React.createElement(RootStack.Screen, {\n    name: \"Forgot Password Stack\",\n    component: ForgotPasswordStack,\n    options: {\n      headerShown: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }\n  }), React.createElement(RootStack.Screen, {\n    name: \"Registration\",\n    component: RegistrationStack,\n    options: {\n      headerShown: false\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 15\n    }\n  }))));\n};","map":{"version":3,"sources":["/Users/mattdizon/Desktop/bubble-react-native/src/auth/IsAuthenticated.tsx"],"names":["React","useEffect","useState","getAsyncStorageItem","createStackNavigator","Login","RegistrationStack","ForgotPasswordStack","AuthenticatedStack","jwt_decode","keysToCamel","UserContext","IsAuthenticated","credentials","me","setMe","userDecoded","userContext","useMemo","then","res","JSON","parse","RootStack","headerShown"],"mappings":";;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,SAASC,QAAT,QAAyB,OAAzB;AACA,SAASC,mBAAT;AACA,SAASC,oBAAT,QAAqC,yBAArC;AAEA,SAASC,KAAT;AACA,SAASC,iBAAT;AACA,SAASC,mBAAT;AACA,SAASC,kBAAT;AACA,OAAOC,UAAP,MAAuB,YAAvB;AACA,SAASC,WAAT;AACA,SAASC,WAAT;AAEA,OAAO,IAAMC,eAA6B,GAAG,SAAhCA,eAAgC,OAAmB;AAAA,MAAjBC,WAAiB,QAAjBA,WAAiB;;AAC9D,kBAAoBX,QAAQ,CAAc,IAAd,CAA5B;AAAA;AAAA,MAAOY,EAAP;AAAA,MAAWC,KAAX;;AAEAd,EAAAA,SAAS,CAAC,YAAM;AACd,QAAGY,WAAH,EAAe;AACb,UAAMG,WAAW,GAAGP,UAAU,CAACI,WAAD,CAA9B;AACAE,MAAAA,KAAK,CAACL,WAAW,CAACM,WAAD,CAAZ,CAAL;AACD;AACF,GALQ,EAKN,CAACH,WAAD,CALM,CAAT;AAOA,MAAMI,WAAW,GAAGjB,KAAK,CAACkB,OAAN,CAAc,YAAM;AACtC,WAAO;AACLJ,MAAAA,EAAE,EAAFA,EADK;AAELC,MAAAA,KAAK,EAALA;AAFK,KAAP;AAID,GALmB,EAKjB,CAACF,WAAD,CALiB,CAApB;AAOAZ,EAAAA,SAAS,CAAC,YAAM;AACdE,IAAAA,mBAAmB,CAAC,IAAD,CAAnB,CAA0BgB,IAA1B,CAA+B,UAACC,GAAD,EAAS;AACtC,UAAIA,GAAG,KAAK,IAAZ,EAAkB;AAChBL,QAAAA,KAAK,CAACM,IAAI,CAACC,KAAL,CAAWF,GAAX,CAAD,CAAL;AACD;AACF,KAJD;AAKD,GANQ,EAMN,EANM,CAAT;AAQA,MAAMG,SAAS,GAAGnB,oBAAoB,EAAtC;AAEA,SACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEa,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,SAAD,CAAW,SAAX;AAAqB,IAAA,IAAI,EAAC,OAA1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACIJ,WAAW,GACT,oBAAC,SAAD,CAAW,MAAX;AACA,IAAA,IAAI,EAAC,eADL;AAEA,IAAA,SAAS,EAAEL,kBAFX;AAGA,IAAA,OAAO,EAAE;AAAEgB,MAAAA,WAAW,EAAE;AAAf,KAHT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADS,GAMT,0CACE,oBAAC,SAAD,CAAW,MAAX;AACE,IAAA,IAAI,EAAC,OADP;AAEE,IAAA,SAAS,EAAEnB,KAFb;AAGE,IAAA,OAAO,EAAE;AAAEmB,MAAAA,WAAW,EAAE;AAAf,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,EAME,oBAAC,SAAD,CAAW,MAAX;AACE,IAAA,IAAI,EAAC,uBADP;AAEE,IAAA,SAAS,EAAEjB,mBAFb;AAGE,IAAA,OAAO,EAAE;AAAEiB,MAAAA,WAAW,EAAE;AAAf,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IANF,EAWE,oBAAC,SAAD,CAAW,MAAX;AACE,IAAA,IAAI,EAAC,cADP;AAEE,IAAA,SAAS,EAAElB,iBAFb;AAGE,IAAA,OAAO,EAAE;AAAEkB,MAAAA,WAAW,EAAE;AAAf,KAHX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAXF,CAPN,CADF,CADF;AA+BD,CA1DM","sourcesContent":["import React, { useEffect } from 'react'\nimport { useState } from 'react'\nimport { getAsyncStorageItem } from '../utils/asyncStorage'\nimport { createStackNavigator } from '@react-navigation/stack'\nimport { TemplateType, User } from './types'\nimport { Login } from '../screens/Login/Login'\nimport { RegistrationStack } from '../stacks/RegistrationStack/RegistrationStack'\nimport { ForgotPasswordStack } from '../stacks/ForgotPasswordStack/ForgotPasswordStack'\nimport { AuthenticatedStack } from '../stacks/AuthenticatedStack/AuthenticatedStack'\nimport jwt_decode from 'jwt-decode'\nimport { keysToCamel } from '../utils/stringhelpers'\nimport { UserContext } from '../providers/UserProvider/UserProvider'\n\nexport const IsAuthenticated: TemplateType = ({credentials}) => {\n  const [me, setMe] = useState<User | null>(null)\n\n  useEffect(() => {\n    if(credentials){\n      const userDecoded = jwt_decode(credentials)\n      setMe(keysToCamel(userDecoded) as User)\n    }\n  }, [credentials])\n\n  const userContext = React.useMemo(() => {\n    return {\n      me,\n      setMe\n    }\n  }, [credentials])\n\n  useEffect(() => {\n    getAsyncStorageItem('me').then((res) => {\n      if (res !== null) {\n        setMe(JSON.parse(res))\n      }\n    })\n  }, [])\n  \n  const RootStack = createStackNavigator()\n\n  return (\n    <UserContext.Provider value={userContext}>\n      <RootStack.Navigator mode='modal'>\n        { credentials\n          ? <RootStack.Screen\n            name=\"Authenticated\"\n            component={AuthenticatedStack}\n            options={{ headerShown: false}}\n            />\n          : <>\n              <RootStack.Screen\n                name=\"Login\"\n                component={Login}\n                options={{ headerShown: false}}\n              />\n              <RootStack.Screen\n                name=\"Forgot Password Stack\"\n                component={ForgotPasswordStack}\n                options={{ headerShown: false}}\n              />\n              <RootStack.Screen\n                name=\"Registration\"\n                component={RegistrationStack}\n                options={{ headerShown: false}}\n              />\n            </>\n        }\n        \n      </RootStack.Navigator>\n    </UserContext.Provider>\n  )\n}\n\n"]},"metadata":{},"sourceType":"module"}