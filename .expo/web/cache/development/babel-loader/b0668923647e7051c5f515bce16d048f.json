{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mattdizon/Desktop/bubble-react-native/src/navigation/Navigation.tsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { NavigationContainer } from '@react-navigation/native';\nimport React, { useEffect, useState } from 'react';\nimport View from \"react-native-web/dist/exports/View\";\nimport { IsAuthenticated } from \"../auth/IsAuthenticated\";\nimport { AuthContext } from \"../providers/AuthProvider/AuthProvider\";\nimport { BUBBLEBLUE, WHITE } from \"../theme/theme\";\nimport { clearStorage, getAsyncStorageItem } from \"../utils/asyncStorage\";\nimport { navigationRef } from \"./RootNavigation\";\nexport var Navigation = function Navigation() {\n  var _useState = useState(true),\n      _useState2 = _slicedToArray(_useState, 2),\n      isLoading = _useState2[0],\n      setIsLoading = _useState2[1];\n\n  var _useState3 = useState(),\n      _useState4 = _slicedToArray(_useState3, 2),\n      credentials = _useState4[0],\n      setCredentials = _useState4[1];\n\n  var authContext = React.useMemo(function () {\n    return {\n      credentials: credentials,\n      signIn: function signIn(credentials) {\n        setCredentials(credentials);\n      },\n      signOut: function signOut() {\n        return _regeneratorRuntime.async(function signOut$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                setCredentials(undefined);\n                _context.next = 3;\n                return _regeneratorRuntime.awrap(clearStorage());\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, null, null, null, Promise);\n      }\n    };\n  }, [credentials]);\n\n  var getData = function getData() {\n    var storageCredentials, x, userDecoded;\n    return _regeneratorRuntime.async(function getData$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.prev = 0;\n            _context2.next = 3;\n            return _regeneratorRuntime.awrap(getAsyncStorageItem('credentials'));\n\n          case 3:\n            storageCredentials = _context2.sent;\n\n            if (storageCredentials !== null) {\n              x = JSON.parse(storageCredentials);\n              setCredentials(x);\n              userDecoded = jwt_decode(x);\n              console.log(x);\n            }\n\n            _context2.next = 10;\n            break;\n\n          case 7:\n            _context2.prev = 7;\n            _context2.t0 = _context2[\"catch\"](0);\n            console.log('errr');\n\n          case 10:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, [[0, 7]], Promise);\n  };\n\n  useEffect(function () {\n    getData();\n  }, []);\n  return React.createElement(AuthContext.Provider, {\n    value: authContext,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 5\n    }\n  }, !isLoading ? React.createElement(View, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 13\n    }\n  }, \" \") : React.createElement(NavigationContainer, {\n    theme: theme,\n    ref: navigationRef,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53,\n      columnNumber: 13\n    }\n  }, React.createElement(IsAuthenticated, {\n    credentials: credentials,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 15\n    }\n  })));\n};\nvar theme = {\n  colors: {\n    primary: BUBBLEBLUE,\n    background: BUBBLEBLUE,\n    card: BUBBLEBLUE,\n    text: WHITE\n  }\n};\n\nfunction jwt_decode(credentials) {\n  throw new Error('Function not implemented.');\n}","map":{"version":3,"sources":["/Users/mattdizon/Desktop/bubble-react-native/src/navigation/Navigation.tsx"],"names":["NavigationContainer","React","useEffect","useState","IsAuthenticated","AuthContext","BUBBLEBLUE","WHITE","clearStorage","getAsyncStorageItem","navigationRef","Navigation","isLoading","setIsLoading","credentials","setCredentials","authContext","useMemo","signIn","signOut","undefined","getData","storageCredentials","x","JSON","parse","userDecoded","jwt_decode","console","log","theme","colors","primary","background","card","text","Error"],"mappings":";;;;;;AAAA,SAASA,mBAAT,QAAoC,0BAApC;AACA,OAAOC,KAAP,IAAgBC,SAAhB,EAA2BC,QAA3B,QAA2C,OAA3C;;AAEA,SAASC,eAAT;AACA,SAASC,WAAT;AACA,SAASC,UAAT,EAAqBC,KAArB;AACA,SAASC,YAAT,EAAuBC,mBAAvB;AACA,SAAQC,aAAR;AAIA,OAAO,IAAMC,UAAU,GAAG,SAAbA,UAAa,GAAM;AAE9B,kBAAkCR,QAAQ,CAAC,IAAD,CAA1C;AAAA;AAAA,MAAOS,SAAP;AAAA,MAAkBC,YAAlB;;AACA,mBAAsCV,QAAQ,EAA9C;AAAA;AAAA,MAAOW,WAAP;AAAA,MAAoBC,cAApB;;AAEA,MAAMC,WAAW,GAAGf,KAAK,CAACgB,OAAN,CAAc,YAAM;AACtC,WAAO;AACLH,MAAAA,WAAW,EAAXA,WADK;AAELI,MAAAA,MAAM,EAAE,gBAACJ,WAAD,EAAsB;AAC5BC,QAAAA,cAAc,CAACD,WAAD,CAAd;AACD,OAJI;AAKLK,MAAAA,OAAO,EAAE;AAAA;AAAA;AAAA;AAAA;AACPJ,gBAAAA,cAAc,CAACK,SAAD,CAAd;AADO;AAAA,iDAEDZ,YAAY,EAFX;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AALJ,KAAP;AAUD,GAXmB,EAWjB,CAACM,WAAD,CAXiB,CAApB;;AAaA,MAAMO,OAAO,GAAG,SAAVA,OAAU;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6CAEqBZ,mBAAmB,CAAC,aAAD,CAFxC;;AAAA;AAENa,YAAAA,kBAFM;;AAGZ,gBAAIA,kBAAkB,KAAK,IAA3B,EAAiC;AACzBC,cAAAA,CADyB,GACrBC,IAAI,CAACC,KAAL,CAAWH,kBAAX,CADqB;AAE/BP,cAAAA,cAAc,CAACQ,CAAD,CAAd;AACMG,cAAAA,WAHyB,GAGXC,UAAU,CAACJ,CAAD,CAHC;AAI/BK,cAAAA,OAAO,CAACC,GAAR,CAAYN,CAAZ;AACD;;AARW;AAAA;;AAAA;AAAA;AAAA;AAUZK,YAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;;AAVY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,GAAhB;;AAcA3B,EAAAA,SAAS,CAAC,YAAM;AACdmB,IAAAA,OAAO;AACR,GAFQ,EAEN,EAFM,CAAT;AAIA,SACE,oBAAC,WAAD,CAAa,QAAb;AAAsB,IAAA,KAAK,EAAEL,WAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAEI,CAACJ,SAAD,GACI,oBAAC,IAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SADJ,GAEI,oBAAC,mBAAD;AAAqB,IAAA,KAAK,EAAEkB,KAA5B;AAAmC,IAAA,GAAG,EAAEpB,aAAxC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,oBAAC,eAAD;AAAiB,IAAA,WAAW,EAAEI,WAA9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CAJR,CADF;AAWD,CA/CM;AAiDP,IAAMgB,KAAK,GAAG;AACZC,EAAAA,MAAM,EAAE;AACJC,IAAAA,OAAO,EAAE1B,UADL;AAEJ2B,IAAAA,UAAU,EAAE3B,UAFR;AAGJ4B,IAAAA,IAAI,EAAE5B,UAHF;AAIJ6B,IAAAA,IAAI,EAAE5B;AAJF;AADI,CAAd;;AASA,SAASoB,UAAT,CAAoBb,WAApB,EAAsC;AACpC,QAAM,IAAIsB,KAAJ,CAAU,2BAAV,CAAN;AACD","sourcesContent":["import { NavigationContainer } from '@react-navigation/native'\nimport React, { useEffect, useState } from 'react'\nimport { View } from 'react-native'\nimport { IsAuthenticated } from '../auth/IsAuthenticated'\nimport { AuthContext } from '../providers/AuthProvider/AuthProvider'\nimport { BUBBLEBLUE, WHITE } from '../theme/theme'\nimport { clearStorage, getAsyncStorageItem, setAsyncStorageItem } from '../utils/asyncStorage'\nimport {navigationRef} from './RootNavigation'\n\n// show loading screen first\n// then choose if logged in or not\nexport const Navigation = () => {\n\n  const [isLoading, setIsLoading] = useState(true)\n  const [credentials, setCredentials] = useState<any | undefined>()\n\n  const authContext = React.useMemo(() => {\n    return {\n      credentials,\n      signIn: (credentials: any) => {\n        setCredentials(credentials)\n      },\n      signOut: async () => {\n        setCredentials(undefined)\n        await clearStorage()\n      },\n    }\n  }, [credentials])\n\n  const getData = async () => {\n    try {\n      const storageCredentials = await getAsyncStorageItem('credentials')\n      if (storageCredentials !== null) {\n        const x = JSON.parse(storageCredentials)\n        setCredentials(x)\n        const userDecoded = jwt_decode(x)\n        console.log(x)\n      }\n    } catch (e) {\n      console.log('errr')\n    }\n  }\n\n  useEffect(() => {\n    getData()\n  }, [])\n\n  return (\n    <AuthContext.Provider value={authContext}>\n      { \n        !isLoading\n          ? <View> </View>\n          : <NavigationContainer theme={theme} ref={navigationRef}>\n              <IsAuthenticated credentials={credentials}/>\n          </NavigationContainer>\n        }\n    </AuthContext.Provider>\n  )\n}\n\nconst theme = {\n  colors: {\n      primary: BUBBLEBLUE,\n      background: BUBBLEBLUE,\n      card: BUBBLEBLUE,\n      text: WHITE,\n  }\n};\n\nfunction jwt_decode(credentials: any) {\n  throw new Error('Function not implemented.')\n}\n"]},"metadata":{},"sourceType":"module"}