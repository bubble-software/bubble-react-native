{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mattdizon/Desktop/bubble-react-native/src/components/Vote/Vote.tsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useContext, useState } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\nimport { submitVote } from \"../../api/service\";\nimport { AuthContext } from \"../../providers/AuthProvider/AuthProvider\";\nexport var Vote = function Vote(_ref) {\n  var _ref$flexDirection = _ref.flexDirection,\n      flexDirection = _ref$flexDirection === void 0 ? 'column' : _ref$flexDirection,\n      votes = _ref.votes,\n      prevVote = _ref.prevVote,\n      isVoted = _ref.isVoted,\n      postId = _ref.postId;\n\n  var _useState = useState(votes),\n      _useState2 = _slicedToArray(_useState, 2),\n      voteCount = _useState2[0],\n      setVoteCount = _useState2[1];\n\n  var _useState3 = useState(prevVote),\n      _useState4 = _slicedToArray(_useState3, 2),\n      prevVoteState = _useState4[0],\n      setPrevVoteState = _useState4[1];\n\n  var DeviceWidth = Dimensions.get('window').width;\n\n  var _useContext = useContext(AuthContext),\n      credentials = _useContext.credentials;\n\n  var voteColor = function voteColor(top) {\n    var color = \"gray\";\n\n    if (top) {\n      if (prevVoteState === 1) {\n        color = \"green\";\n      }\n    } else {\n      if (prevVoteState === -1) {\n        color = \"red\";\n      }\n    }\n\n    return color;\n  };\n\n  var voteHandler = function voteHandler(top) {\n    return _regeneratorRuntime.async(function voteHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (top) {\n              if (prevVoteState === 1) {\n                setVoteCount(voteCount - 1);\n                setPrevVoteState(0);\n              } else {\n                setVoteCount(voteCount + 1);\n                setPrevVoteState(1);\n              }\n            } else {\n              if (prevVoteState === -1) {\n                setVoteCount(voteCount + 1);\n                setPrevVoteState(0);\n              } else {\n                setVoteCount(voteCount - 1);\n                setPrevVoteState(-1);\n              }\n            }\n\n          case 1:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var submitVoteAction = function submitVoteAction() {\n    submitVote({\n      direction: 1,\n      postId: postId,\n      globalDirection: 0,\n      isVoted: isVoted,\n      voteType: 'post'\n    }, credentials);\n  };\n\n  var viewWidth = flexDirection === 'row' ? undefined : DeviceWidth * 0.1;\n  return React.createElement(View, {\n    style: {\n      width: viewWidth,\n      marginBottom: 1,\n      alignItems: 'center',\n      flexDirection: flexDirection\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 9\n    }\n  }, React.createElement(Ionicons, {\n    name: \"md-caret-up-outline\",\n    size: 32,\n    color: voteColor(true),\n    onPress: function onPress() {\n      return voteHandler(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 59,\n      columnNumber: 9\n    }\n  }), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 9\n    }\n  }, voteCount), React.createElement(Ionicons, {\n    name: \"md-caret-down-outline\",\n    size: 32,\n    color: voteColor(false),\n    onPress: function onPress() {\n      return voteHandler(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 61,\n      columnNumber: 9\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/mattdizon/Desktop/bubble-react-native/src/components/Vote/Vote.tsx"],"names":["React","useContext","useState","Ionicons","submitVote","AuthContext","Vote","flexDirection","votes","prevVote","isVoted","postId","voteCount","setVoteCount","prevVoteState","setPrevVoteState","DeviceWidth","Dimensions","get","width","credentials","voteColor","top","color","voteHandler","submitVoteAction","direction","globalDirection","voteType","viewWidth","undefined","marginBottom","alignItems"],"mappings":"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","sourcesContent":["import axios from 'axios'\nimport React, { useContext, useEffect, useState } from 'react'\nimport { Dimensions, View, Text } from 'react-native'\nimport Ionicons from 'react-native-vector-icons/Ionicons'\nimport { submitVote } from '../../api/service'\nimport { AuthContext } from '../../providers/AuthProvider/AuthProvider'\n\nexport const  Vote = ({\n    flexDirection = 'column',\n    votes, \n    prevVote,\n    isVoted,\n    postId,\n}: any)  => {\n    const [voteCount, setVoteCount] = useState(votes)\n    const [prevVoteState, setPrevVoteState] = useState(prevVote)\n    const DeviceWidth = Dimensions.get('window').width\n    const { credentials } = useContext(AuthContext)\n    const voteColor = (top: boolean) => {\n        let color =  \"gray\"\n        if(top){\n            if(prevVoteState === 1){\n                color = \"green\"\n            }\n        }\n        else{\n            if(prevVoteState === -1){\n                color = \"red\"\n            }\n        }\n        return color\n    }\n    const voteHandler = async  (top: boolean) => {\n        if(top){\n            if(prevVoteState === 1){\n                setVoteCount(voteCount-1)\n                setPrevVoteState(0)\n            }else{\n                setVoteCount(voteCount+1)\n                setPrevVoteState(1)\n            }\n        }else{\n            if(prevVoteState === -1){\n                setVoteCount(voteCount+1)\n                setPrevVoteState(0)\n            } \n            else{\n                setVoteCount(voteCount-1)\n                setPrevVoteState(-1)\n            }\n        }\n    }\n    const submitVoteAction = () => {\n        submitVote({direction:1, postId, globalDirection: 0, isVoted, voteType: 'post'}, credentials!)\n    }\n    const viewWidth = flexDirection === 'row' ? undefined : DeviceWidth*0.1\n    return (\n        <View style={{width: viewWidth,  marginBottom:1, alignItems: 'center',flexDirection: flexDirection}}>\n        <Ionicons name=\"md-caret-up-outline\" size={32} color={voteColor(true)} onPress= {() => voteHandler(true)} />\t\n        <Text>{voteCount}</Text>\n        <Ionicons name=\"md-caret-down-outline\" size={32} color={voteColor(false)} onPress= {() => voteHandler(false)}/>\n    </View>\n    )\n}\n"]},"metadata":{},"sourceType":"module"}