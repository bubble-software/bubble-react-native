{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/mattdizon/Desktop/use this /bubble-react-native/src/components/Vote/Vote.tsx\";\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useContext, useState } from 'react';\nimport Dimensions from \"react-native-web/dist/exports/Dimensions\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Ionicons from \"@expo/vector-icons/Ionicons\";\nimport { submitVote } from \"../../api/service\";\nimport { AuthContext } from \"../../providers/AuthProvider/AuthProvider\";\nexport var Vote = function Vote(_ref) {\n  var _ref$flexDirection = _ref.flexDirection,\n      flexDirection = _ref$flexDirection === void 0 ? 'column' : _ref$flexDirection,\n      votes = _ref.votes,\n      prevVote = _ref.prevVote,\n      isVoted = _ref.isVoted,\n      postId = _ref.postId;\n\n  var _useState = useState(votes),\n      _useState2 = _slicedToArray(_useState, 2),\n      voteCount = _useState2[0],\n      setVoteCount = _useState2[1];\n\n  var _useState3 = useState(prevVote),\n      _useState4 = _slicedToArray(_useState3, 2),\n      prevVoteState = _useState4[0],\n      setPrevVoteState = _useState4[1];\n\n  var DeviceWidth = Dimensions.get('window').width;\n\n  var _useContext = useContext(AuthContext),\n      credentials = _useContext.credentials;\n\n  var voteColor = function voteColor(top) {\n    var color = 'gray';\n\n    if (top) {\n      if (prevVoteState === 1) {\n        color = 'green';\n      }\n    } else {\n      if (prevVoteState === -1) {\n        color = 'red';\n      }\n    }\n\n    return color;\n  };\n\n  var voteHandler = function voteHandler(top) {\n    return _regeneratorRuntime.async(function voteHandler$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (top) {\n              if (prevVoteState === 1) {\n                setVoteCount(voteCount - 1);\n                setPrevVoteState(0);\n              } else {\n                setVoteCount(voteCount + 1);\n                setPrevVoteState(1);\n              }\n            } else {\n              if (prevVoteState === -1) {\n                setVoteCount(voteCount + 1);\n                setPrevVoteState(0);\n              } else {\n                setVoteCount(voteCount - 1);\n                setPrevVoteState(-1);\n              }\n            }\n\n            submitVote({\n              direction: 1,\n              postId: postId,\n              globalDirection: 0,\n              isVoted: isVoted,\n              voteType: 'post'\n            }, credentials);\n\n          case 2:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var viewWidth = flexDirection === 'row' ? undefined : DeviceWidth * 0.1;\n  return React.createElement(View, {\n    style: {\n      width: viewWidth,\n      marginBottom: 1,\n      alignItems: 'center',\n      flexDirection: flexDirection\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 3\n    }\n  }, React.createElement(Ionicons, {\n    name: voteColor(true) === 'green' ? 'triangle' : 'triangle-outline',\n    size: 18,\n    color: voteColor(true),\n    onPress: function onPress() {\n      return voteHandler(true);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 57,\n      columnNumber: 4\n    }\n  }), React.createElement(Text, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 4\n    }\n  }, voteCount), React.createElement(Ionicons, {\n    name: voteColor(false) === 'red' ? 'triangle' : 'triangle-outline',\n    style: {\n      transform: [{\n        rotate: '180deg'\n      }]\n    },\n    size: 18,\n    color: voteColor(false),\n    onPress: function onPress() {\n      return voteHandler(false);\n    },\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 4\n    }\n  }));\n};","map":{"version":3,"sources":["/Users/mattdizon/Desktop/use this /bubble-react-native/src/components/Vote/Vote.tsx"],"names":["React","useContext","useState","Ionicons","submitVote","AuthContext","Vote","flexDirection","votes","prevVote","isVoted","postId","voteCount","setVoteCount","prevVoteState","setPrevVoteState","DeviceWidth","Dimensions","get","width","credentials","voteColor","top","color","voteHandler","direction","globalDirection","voteType","viewWidth","undefined","marginBottom","alignItems","transform","rotate"],"mappings":"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","sourcesContent":["import React, { useContext, useState } from 'react'\nimport { Dimensions, View, Text } from 'react-native'\nimport Ionicons from 'react-native-vector-icons/Ionicons'\nimport { submitVote } from '../../api/service'\nimport { AuthContext } from '../../providers/AuthProvider/AuthProvider'\nimport { TemplateType } from './types'\n\nexport const Vote: TemplateType = ({\n  flexDirection = 'column',\n  votes,\n  prevVote,\n  isVoted,\n  postId,\n}): JSX.Element => {\n  const [voteCount, setVoteCount] = useState(votes)\n  const [prevVoteState, setPrevVoteState] = useState(prevVote)\n  const DeviceWidth = Dimensions.get('window').width\n\n  const { credentials } = useContext(AuthContext)\n  const voteColor = (top: boolean) => {\n    let color = 'gray'\n    if (top) {\n      if (prevVoteState === 1) {\n        color = 'green'\n      }\n    } else {\n      if (prevVoteState === -1) {\n        color = 'red'\n      }\n    }\n    return color\n  }\n  const voteHandler = async (top: boolean) => {\n    if (top) {\n      if (prevVoteState === 1) {\n        setVoteCount(voteCount - 1)\n        setPrevVoteState(0)\n      } else {\n        setVoteCount(voteCount + 1)\n        setPrevVoteState(1)\n      }\n    } else {\n      if (prevVoteState === -1) {\n        setVoteCount(voteCount + 1)\n        setPrevVoteState(0)\n      } else {\n        setVoteCount(voteCount - 1)\n        setPrevVoteState(-1)\n      }\n    }\n    submitVote({ direction: 1, postId, globalDirection: 0, isVoted, voteType: 'post' }, credentials!)\n  }\n\n  const viewWidth = flexDirection === 'row' ? undefined : DeviceWidth * 0.1\n  return (\n\t\t<View style={{ width: viewWidth, marginBottom: 1, alignItems: 'center', flexDirection: flexDirection }}>\n\t\t\t<Ionicons \n        name={voteColor(true) === 'green' ? 'triangle' : 'triangle-outline'} \n        size={18} color={voteColor(true)} \n        onPress= {() => voteHandler(true)}\n      />\n\t\t\t<Text>{voteCount}</Text>\n\t\t\t<Ionicons \n        name={voteColor(false) === 'red' ? 'triangle' : 'triangle-outline'} \n        style={{transform: [{rotate: '180deg'}]}} \n        size={18} color={voteColor(false)} \n        onPress= {() => voteHandler(false)}\n      />\n\t\t</View>\n  )\n}\n"]},"metadata":{},"sourceType":"module"}