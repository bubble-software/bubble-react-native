{"ast":null,"code":"import moment from 'moment';\nexport var prettyWordDate = function prettyWordDate(date) {\n  if (!date) {\n    throw new Error(\"Expected number, string, or date object, but got: \" + date);\n  }\n\n  return moment(date).format('LL');\n};\nexport var prettyCurrentDatePlusYears = function prettyCurrentDatePlusYears(date) {\n  return moment(date).format('L');\n};\nexport var truncateString = function truncateString(str, num) {\n  if (str.length <= num) {\n    return str;\n  }\n\n  return str.slice(0, num) + '...';\n};\n\nvar isObject = function isObject(o) {\n  return o === Object(o) && !isArray(o) && typeof o !== 'function';\n};\n\nvar isArray = function isArray(a) {\n  return Array.isArray(a);\n};\n\nvar toCamel = function toCamel(s) {\n  return s.replace(/([-_][a-z])/ig, function ($1) {\n    return $1.toUpperCase().replace('-', '').replace('_', '');\n  });\n};\n\nexport var keysToCamel = function keysToCamel(o) {\n  if (isObject(o)) {\n    var n = {};\n    Object.keys(o).forEach(function (k) {\n      n[toCamel(k)] = keysToCamel(o[k]);\n    });\n    return n;\n  } else if (isArray(o)) {\n    return o.map(function (i) {\n      return keysToCamel(i);\n    });\n  }\n\n  return o;\n};","map":{"version":3,"sources":["/Users/mattdizon/Desktop/use this /bubble-react-native/src/utils/stringhelpers.ts"],"names":["moment","prettyWordDate","date","Error","format","prettyCurrentDatePlusYears","truncateString","str","num","length","slice","isObject","o","Object","isArray","a","Array","toCamel","s","replace","$1","toUpperCase","keysToCamel","n","keys","forEach","k","map","i"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,QAAnB;AAEA,OAAO,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAACC,IAAD,EAA0C;AACtE,MAAI,CAACA,IAAL,EAAW;AACT,UAAM,IAAIC,KAAJ,wDAC8CD,IAD9C,CAAN;AAGD;;AACD,SAAOF,MAAM,CAACE,IAAD,CAAN,CAAaE,MAAb,CAAoB,IAApB,CAAP;AACD,CAPM;AASP,OAAO,IAAMC,0BAA0B,GAAG,SAA7BA,0BAA6B,CAACH,IAAD;AAAA,SACxCF,MAAM,CAACE,IAAD,CAAN,CAAaE,MAAb,CAAoB,GAApB,CADwC;AAAA,CAAnC;AAGP,OAAO,IAAME,cAAc,GAAG,SAAjBA,cAAiB,CAACC,GAAD,EAAcC,GAAd,EAAsC;AAGlE,MAAID,GAAG,CAACE,MAAJ,IAAcD,GAAlB,EAAuB;AACrB,WAAOD,GAAP;AACD;;AAED,SAAOA,GAAG,CAACG,KAAJ,CAAU,CAAV,EAAaF,GAAb,IAAoB,KAA3B;AACD,CARM;;AAWP,IAAMG,QAAQ,GAAG,SAAXA,QAAW,CAACC,CAAD,EAAqB;AACpC,SAAOA,CAAC,KAAKC,MAAM,CAACD,CAAD,CAAZ,IAAmB,CAACE,OAAO,CAACF,CAAD,CAA3B,IAAkC,OAAOA,CAAP,KAAa,UAAtD;AACD,CAFD;;AAIA,IAAME,OAAO,GAAG,SAAVA,OAAU,CAACC,CAAD,EAAqB;AACnC,SAAOC,KAAK,CAACF,OAAN,CAAcC,CAAd,CAAP;AACD,CAFD;;AAIA,IAAME,OAAO,GAAG,SAAVA,OAAU,CAACC,CAAD,EAAoB;AAClC,SAAOA,CAAC,CAACC,OAAF,CAAU,eAAV,EAA2B,UAACC,EAAD,EAAa;AAC7C,WAAOA,EAAE,CAACC,WAAH,GACJF,OADI,CACI,GADJ,EACS,EADT,EAEJA,OAFI,CAEI,GAFJ,EAES,EAFT,CAAP;AAGD,GAJM,CAAP;AAKD,CAND;;AAQA,OAAO,IAAMG,WAAW,GAAG,SAAdA,WAAc,CAACV,CAAD,EAAkD;AAC3E,MAAID,QAAQ,CAACC,CAAD,CAAZ,EAAiB;AACf,QAAMW,CAAC,GAAG,EAAV;AAEAV,IAAAA,MAAM,CAACW,IAAP,CAAYZ,CAAZ,EACGa,OADH,CACW,UAACC,CAAD,EAAO;AAEdH,MAAAA,CAAC,CAACN,OAAO,CAACS,CAAD,CAAR,CAAD,GAAgBJ,WAAW,CAACV,CAAC,CAACc,CAAD,CAAF,CAA3B;AACD,KAJH;AAMA,WAAOH,CAAP;AACD,GAVD,MAUO,IAAIT,OAAO,CAACF,CAAD,CAAX,EAAgB;AACrB,WAAOA,CAAC,CAACe,GAAF,CAAM,UAACC,CAAD,EAAY;AACvB,aAAON,WAAW,CAACM,CAAD,CAAlB;AACD,KAFM,CAAP;AAGD;;AACD,SAAOhB,CAAP;AACD,CAjBM","sourcesContent":["import moment from 'moment'\n// June 3, 2019\nexport const prettyWordDate = (date: number | string | Date): string => {\n  if (!date) {\n    throw new Error(\n\t\t\t`Expected number, string, or date object, but got: ${date}`,\n    )\n  }\n  return moment(date).format('LL')\n}\n\nexport const prettyCurrentDatePlusYears = (date: Date): string =>\n  moment(date).format('L')\n\nexport const truncateString = (str: string, num: number): string => {\n  // If the length of str is less than or equal to num\n  // just return str--don't truncate it.\n  if (str.length <= num) {\n    return str\n  }\n  // Return str truncated with '...' concatenated to the end of str.\n  return str.slice(0, num) + '...'\n}\n\n/* eslint-disable */ \nconst isObject = (o: any): boolean => {\n  return o === Object(o) && !isArray(o) && typeof o !== 'function'\n}\n\nconst isArray = (a: any): boolean => {\n  return Array.isArray(a)\n}\n\nconst toCamel = (s: any): string => {\n  return s.replace(/([-_][a-z])/ig, ($1: any) => {\n    return $1.toUpperCase()\n      .replace('-', '')\n      .replace('_', '')\n  })\n}\n\nexport const keysToCamel = (o: any): Record<string, unknown> | Array<any> => {\n  if (isObject(o)) {\n    const n = {}\n\n    Object.keys(o)\n      .forEach((k) => {\n        // @ts-ignore\n        n[toCamel(k)] = keysToCamel(o[k])\n      })\n\n    return n\n  } else if (isArray(o)) {\n    return o.map((i: any) => {\n      return keysToCamel(i)\n    })\n  }\n  return o\n}"]},"metadata":{},"sourceType":"module"}